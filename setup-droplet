#!/usr/bin/bash

USER=$1

BIN=/home/${USER}/pebble-bin/
SRC=/home/${USER}/pebble/
DST=/home/${USER}/

IMAGEID=5099454

transfer=0
if [ $# -eq 2 ]; then
	if [ $2 = "kill" ]; then
		for i in `seq 1 6`; do
			${BIN}/digitalocean deletedroplet --name=test${i}
		done
		exit
	fi
	if [ $2 = "transfer" ]; then
		transfer=1
	fi
fi

if [ $transfer -eq 0 ]; then
for i in `seq 1 6`; do
	${BIN}/digitalocean createdroplet --name=test${i} --size=4gb --imageid=${IMAGEID}
done
fi

echo "created 6 digitalocean instances"

r=""
while [ true ]; do
	r=`${BIN}/digitalocean listdroplets | awk '/test[1-6]/ {print}'`
	if [ `echo "$r" | wc -l` -eq 6 ]; then
		break
	fi
done

for i in `seq 1 6`; do
	name=test${i}
	f=`echo "$r" | grep $name`
	echo $f
	name[$i]=`echo $f|awk '{print $1}'`
        ippub[$i]=`echo $f|awk '{print $2}'`
	ippri[$i]=`echo $f|awk '{print $3}'`
done
echo "getting ip address"

echo "$r" | awk '{c=1; while (c != 0) {c=system("ping -c 1 -q " $2);}}'

r=`${BIN}/digitalocean listdroplets | awk '/node1/ {print}'`
cephname=`echo $r|awk '{print $1}'`
cephip=`echo $r|awk '{print $2}'`
cephpri=`echo $r|awk '{print $3}'`
echo "Found CEPH ${cephname} ${cephip} ${cephpri}"

BYPASS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

cat <<CONFDOTC > ${SRC}/conf.c
/*******************************************************************************
 * System configurations.
 ******************************************************************************/

#include <stdio.h>
#include <stdint.h>
#include <raid.h>
#include <conf.h>

#define CLUSTER_NODES (RAID_SLICES + 2)

struct configuration {
	char *nbdname;
	char *nbdexport;
	char *ssd;
	char *storage;
	char *ip;
	int  cache_en;
	int  replicate_en;
	uint16_t port;
};

struct configuration conf[CLUSTER_NODES] = {
	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo1",
	  "${ippri[1]}",
	  1,
	  1,
	  1700 },

	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo2",
	  "${ippri[2]}",
	  1,
	  1,
	  1700 },

	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo3",
	  "${ippri[3]}",
	  1,
	  1,
	  1700 },

	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo4",
	  "${ippri[4]}",
	  0,
	  1,
	  1700 },

	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo5",
	  "${ippri[5]}",
	  0,
	  1,
	  1700 },

	{ "/tmp/nbd-pipe0",
	  "nbd-unix-domain-0",
	  "${DST}ssdcache",
	  "/dev/rbd/rbd/foo6",
	  "${ippri[6]}",
	  0,
	  1,
	  1700 }
};

int
getclusters(void)
{
	return (CLUSTER_NODES);
}

char *
getnbdname(int clusterid)
{
	return (conf[clusterid].nbdname);
}

char *
getnbddomainname(int clusterid)
{
	return (conf[clusterid].nbdexport);
}

char *
getssd(int clusterid)
{
	return (conf[clusterid].ssd);
}

char *
getstorage(int clusterid)
{
	return (conf[clusterid].storage);
}

char *
getip(int clusterid)
{
	return (conf[clusterid].ip);
}

uint16_t
getport(int clusterid)
{
	return (conf[clusterid].port);
}

int
getcache_en(int clusterid)
{
	return (conf[clusterid].cache_en);
}

int
getreplicate_en(int clusterid)
{
	return (conf[clusterid]. replicate_en);
}
CONFDOTC

cd ${SRC} && make clean && make && cp pebble ${BIN}

if [ $transfer -eq 0 ]; then
for i in `seq 1 6`; do
	ssh ${BYPASS} ${ippub[$i]} 'sudo dd if=/dev/zero of=${DST}ssdcache bs=32M count=1 seek=1023'
done
fi

# connect backend storage
rm -f /tmp/ceph.client.admin.keyring
scp ${BYPASS} ${cephip}:/etc/ceph/ceph.client.admin.keyring /tmp
for i in `seq 1 6`; do
	scp ${BYPASS} /tmp/ceph.client.admin.keyring ${ippub[$i]}:/tmp
	ssh ${BYPASS} ${ippub[$i]} "sudo mv /tmp/ceph.client.admin.keyring /etc/ceph/"
	ssh ${BYPASS} ${ippub[$i]} "sudo rbd create foo${i} --size 16384 -m ${cephpri}"
	ssh ${BYPASS} ${ippub[$i]} "sudo rbd map foo${i} --pool rbd --name client.admin -m ${cephpri}"
done

echo "kill old nbd service"
if [ $transfer -eq 1 ]; then
	ssh ${BYPASS} ${ippub[$i]} "sudo ./nbd-client -d /dev/nbd3"
fi

echo "start pebble service"
for i in `seq 1 6`; do
	inst=`expr $i - 1`
	ssh ${BYPASS} ${ippub[$i]} "sudo killall -9 pebble"
        echo "TRANSFER BINARY TO INSTANCE " ${inst}
	scp ${BYPASS} ${SRC}pebble ${ippub[$i]}:~/
        echo "STARTING SERVICE ON INSTANCE " ${inst}
	ssh ${BYPASS} ${ippub[$i]} "sudo ./pebble ${inst} 0 log"
done

sleep 10

for i in `seq 1 6`; do
	ssh ${BYPASS} ${ippub[$i]} "sudo ./nbd-client -N nbd-unix-domain-0 127.0.0.1 /dev/nbd3 -b 4096 -u /tmp/nbd-pipe0"
done
